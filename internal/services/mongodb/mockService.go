// Code generated by MockGen. DO NOT EDIT.
// Source: food-roulette-api/internal/services/mongodb (interfaces: ServiceI)

// Package mongodb is a generated GoMock package.
package mongodb

import (
	context "context"
	models "food-roulette-api/internal/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockServiceI is a mock of ServiceI interface.
type MockServiceI struct {
	ctrl     *gomock.Controller
	recorder *MockServiceIMockRecorder
}

// MockServiceIMockRecorder is the mock recorder for MockServiceI.
type MockServiceIMockRecorder struct {
	mock *MockServiceI
}

// NewMockServiceI creates a new mock instance.
func NewMockServiceI(ctrl *gomock.Controller) *MockServiceI {
	mock := &MockServiceI{ctrl: ctrl}
	mock.recorder = &MockServiceIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceI) EXPECT() *MockServiceIMockRecorder {
	return m.recorder
}

// AddAllDishes mocks base method.
func (m *MockServiceI) AddAllDishes(arg0 context.Context, arg1 models.AddDishesRequest) ([]models.Dish, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddAllDishes", arg0, arg1)
	ret0, _ := ret[0].([]models.Dish)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddAllDishes indicates an expected call of AddAllDishes.
func (mr *MockServiceIMockRecorder) AddAllDishes(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAllDishes", reflect.TypeOf((*MockServiceI)(nil).AddAllDishes), arg0, arg1)
}

// AddNewCuisine mocks base method.
func (m *MockServiceI) AddNewCuisine(arg0 context.Context, arg1 models.AddCuisineRequest) (*models.Cuisine, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddNewCuisine", arg0, arg1)
	ret0, _ := ret[0].(*models.Cuisine)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddNewCuisine indicates an expected call of AddNewCuisine.
func (mr *MockServiceIMockRecorder) AddNewCuisine(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddNewCuisine", reflect.TypeOf((*MockServiceI)(nil).AddNewCuisine), arg0, arg1)
}

// GetAllCuisines mocks base method.
func (m *MockServiceI) GetAllCuisines(arg0 context.Context) ([]*models.Cuisine, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllCuisines", arg0)
	ret0, _ := ret[0].([]*models.Cuisine)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllCuisines indicates an expected call of GetAllCuisines.
func (mr *MockServiceIMockRecorder) GetAllCuisines(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllCuisines", reflect.TypeOf((*MockServiceI)(nil).GetAllCuisines), arg0)
}
